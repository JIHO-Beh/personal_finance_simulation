version: '3.8' # Docker Compose 파일 형식 버전

services:
  # 1. NGINX 리버스 프록시 서비스
  nginx:
    image: nginx:alpine
    container_name: psc_nginx
    ports:
      - "8082:80" # 내 PC의 8082 포트를 NGINX의 80 포트로 연결
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro # NGINX 설정 파일 마운트 (ro: 읽기 전용)
    depends_on:
      - backend
      - frontend
    networks:
      - app-network
    restart: always

  # 2. PostgreSQL 데이터베이스 서비스 정의
  db:
    image: postgres:17-alpine # PostgreSQL 17.5 버전의 경량 이미지 사용
    container_name: psc_db
    environment:
      POSTGRES_DB: salarydb # 데이터베이스 이름 (필요시 변경)
      POSTGRES_USER: salary_user   # 데이터베이스 사용자 이름 (필요시 변경)
      POSTGRES_PASSWORD: P@ssWord!123
    ports:
      - "5432:5432" # 호스트(내 컴퓨터)의 5432 포트를 컨테이너의 5432 포트에 연결
    volumes:
      - db_data:/var/lib/postgresql/data # 데이터 영속성을 위한 볼륨 마운트
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network # 모든 서비스가 통신할 수 있는 가상 네트워크
    restart: always # 컨테이너가 종료되면 항상 자동으로 다시 시작

  # 3. Spring Boot 백엔드 서비스 정의
  backend:
    build:
      context: ./backend # 'backend/' 폴더 안에 있는 Dockerfile을 사용하여 이미지 빌드
      dockerfile: Dockerfile # 사용할 Dockerfile의 이름
    #ports: # NGINX에의해 외부와 직접 통신하지 않으므로 포트 설정 제거
    #  - "8083:8080" # 호스트의 8083 포트를 컨테이너의 8080 포트에 연결 (백엔드 앱 포트)
    container_name: psc_backend
    environment:
      # Spring Boot 애플리케이션이 PostgreSQL에 연결할 때 사용할 정보
      # 'db'는 docker-compose.yml에 정의된 데이터베이스 서비스의 이름입니다.
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/salarydb # 위 POSTGRES_DB와 동일하게 변경
      SPRING_DATASOURCE_USERNAME: salary_user # 위 POSTGRES_USER와 동일하게 변경
      SPRING_DATASOURCE_PASSWORD: P@ssWord!123 # TODO: 위 POSTGRES_PASSWORD와 동일하게 변경
      SPRING_PROFILES_ACTIVE: dev # Spring Boot의 'dev' 프로파일 활성화 (개발용)
    depends_on: # 'db' 서비스가 먼저 시작되어야 'backend'가 시작됩니다.
      - db
    volumes:
      - ./backend:/app # 호스트의 'backend/' 폴더 내용을 컨테이너의 '/app'에 연결 (코드 변경 시 즉시 반영)
      - ~/.gradle/caches:/root/.gradle/caches # Gradle 캐시 공유로 빌드 속도 향상
    networks:
      - app-network
    restart: on-failure # 컨테이너 실패 시 자동으로 다시 시작

  # 4. Vue.js 프론트엔드 서비스 정의 (개발 모드용)
  frontend:
    build:
      context: ./frontend # 'frontend/' 폴더 안에 있는 Dockerfile을 사용하여 이미지 빌드
      dockerfile: Dockerfile # 사용할 Dockerfile의 이름
    #ports: # NGINX에의해 외부와 직접 통신하지 않으므로 포트 설정 제거
    #  - "8082:3000" # 호스트의 8082 포트를 컨테이너의 3000 포트에 연결 (프론트엔드 앱 포트)
    container_name: psc_frontend
    volumes:
      - ./frontend:/app # 호스트의 'frontend/' 폴더 내용을 컨테이너의 '/app'에 연결
      - /app/node_modules # (중요) node_modules는 컨테이너 내부에 유지 (호스트와 독립적으로)
    # environment: # NGINX에의해 설정 제거
      # Vue 애플리케이션에서 백엔드 API를 호출할 때 사용할 기본 URL
      # 'backend'는 docker-compose.yml에 정의된 백엔드 서비스의 이름입니다.
      # VUE_APP_API_BASE_URL: http://backend:8080 # NGINX에의해 설정 제거
    depends_on: # 'backend' 서비스가 먼저 시작되어야 'frontend'가 시작됩니다.
      - backend
    networks:
      - app-network
    restart: on-failure # 컨테이너 실패 시 자동으로 다시 시작

# 모든 서비스가 통신할 수 있도록 사용자 정의 가상 네트워크를 정의합니다.
networks:
  app-network:
    driver: bridge # 기본 브릿지 네트워크 (가장 흔하게 사용)

# 데이터베이스가 사용하는 영속적인 저장 공간(볼륨)을 정의합니다.
volumes:
  db_data: {} # 'db' 서비스에서 사용할 볼륨 정의