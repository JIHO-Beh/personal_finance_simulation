# 워크플로우의 이름 (GitHub Actions 탭에 표시됨)
name: CI/CD to On-premise Server

# 언제 이 워크플로우를 실행할지 정의하는 '트리거(Trigger)'
on:
  push:
    branches: [ main  ] # 'develop' 브랜치에 코드가 push 될 때마다 실행

# 실행할 작업(Job)들의 목록
jobs:
  # 1. 'test'라는 이름의 첫 번째 작업 (CI: 지속적 통합)
  test:
    # 이 작업은 GitHub이 제공하는 가상 컴퓨터(ubuntu 최신 버전)에서 실행
    runs-on: ubuntu-latest
    
    # 작업의 단계(Step)들
    steps:
      # - Step 1: GitHub 저장소의 코드를 가상 컴퓨터로 내려받기
      - name: Checkout code
        uses: actions/checkout@v4
      
      # - Step 2: Java 17 설치하기
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      # - Step 3: gradlew 파일에 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x backend/gradlew
        
      # - Step 4: 백엔드 테스트 실행
      - name: Run Backend Tests with Gradle
        run: cd backend && ./gradlew test

  # 2. 'deploy'라는 이름의 두 번째 작업 (CD: 지속적 배포)
  deploy:
    # 'test' 작업이 성공적으로 끝나야만 이 작업을 시작하도록 설정 (매우 중요!)
    needs: test
    
    # 이 작업은 우리가 서버 노트북에 설치한 '비서(runner)'에서 실행
    runs-on: self-hosted
    
    # 작업의 단계(Step)들
    steps:
      # - Step 1: GitHub 저장소의 코드를 서버 노트북으로 내려받기
      - name: Checkout latest code
        uses: actions/checkout@v4

      # - Step 2: Docker Compose로 배포 실행
      - name: Deploy with Docker Compose
        run: docker-compose up -d --build